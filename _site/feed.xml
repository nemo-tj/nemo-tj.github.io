<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wall-E - From Space From Earth</title>
    <description>用心设计未来</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 11 Jan 2024 21:00:57 +0800</pubDate>
    <lastBuildDate>Thu, 11 Jan 2024 21:00:57 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>期权交易中的风险控制和盈利机会</title>
        <description>&lt;p&gt;在股票交易中，期权是一种杠杆手段，他通过合约的形式，进行权利的买卖参与到股市中。以call看涨期权为例，当前日期是 2024.01.10，正股股价是100, 买入10张2024.02.28到期合约价格为110的call, 每张价格为1.2, 每张对应100股, 共计120的成本. 这里面会涉及到以下概念:&lt;/p&gt;

&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;02.28到期后
    &lt;ul&gt;
      &lt;li&gt;如果股票没有涨到110, 则期权变成了废纸, 直接损失购入成本120；&lt;/li&gt;
      &lt;li&gt;股票超过110, 假设上涨到 m, 则可以获得 &lt;script type=&quot;math/tex&quot;&gt;P = (m - 110) * 10张 * 100股 - 120&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;m = 111, P = 880, 正股上涨11%, 期权收益 880 / 120 = 733.33%&lt;/li&gt;
          &lt;li&gt;m = 120, P = 9880, 正股上涨20%, 期权收益 9880 / 120 = 8233.33%&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;显然, 这个杠杆效应会非常大. 当然，也可能会赔光所有的成本。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;价内110
    &lt;ul&gt;
      &lt;li&gt;是指正股的价格波动后，落在期权范围内, 对call而言，就是要上涨到合约价格(110)以上.&lt;/li&gt;
      &lt;li&gt;到期日没有落到价内的期权，等于废纸; 所以对合约价格的估计，是买期权能否获益的关键之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;价值(C)
    &lt;ul&gt;
      &lt;li&gt;期权的价值包含两个部分, 内在价值和时间价值&lt;/li&gt;
      &lt;li&gt;内在价值是指正股当前价格(V)和合约价格(A=110)的差: max(0, V - A)&lt;/li&gt;
      &lt;li&gt;时间价值是指距离到期日的时间(D). 显然，这部分会随着时间的流逝而逐步减少, 同时也会收到正股波动的影响。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;波动
    &lt;ul&gt;
      &lt;li&gt;正股的波动会影响到期权的价值，一般地，正股上涨，call期权的价值也会同步上涨；但是时间价值始终是衰减的。两者叠加确定了期权当前的真实价值(C)。&lt;/li&gt;
      &lt;li&gt;一定范围内单位时间的期权价值是单调递增的, &lt;script type=&quot;math/tex&quot;&gt;C / D&lt;/script&gt;, 也就是说时间价值的流逝并不是线性均匀的, 而是会存在加速.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;买期权的成本除了购买时付出的权利金, 交易成本, 时间损失的同样是一个不可忽视的成本。call期权的盈利来源主要是正股的上涨带来的，这就需要我们有非常准确的趋势判断，不然要想通过买call盈利，都是非常困难的。&lt;/p&gt;

&lt;p&gt;期权交易中, 永远把合约价格能否落入价内，作为第一重要的问题。作为买方，要买能落到价内的合约；作为卖方, 挣权利金,要卖价外的期权。这样才可能会盈利。&lt;/p&gt;

&lt;h2 id=&quot;卖方&quot;&gt;卖方&lt;/h2&gt;
&lt;p&gt;call期权交易中, 除了作为买方，靠正股上涨带来盈利。还可以作为卖方，获得权利金本身。从风险的角度看，作为买方，最大的损失是本金。但作为卖方，最大损失可能是无限的。我们不能接受无限的损失，所以可以将两者结合起来。从价值投资的角度上看，选择长期看涨的股票是一个明智的操作。所以我们可以买距离到期时间(T1)长的call期权, 合约价格为(V1), 代表长期看好。同时我们可以通过卖call期权(T2到期,合约价格为V2), 来对冲时间价值的消耗。&lt;/p&gt;

&lt;p&gt;T2到期时, 如果正股上涨, 两份期权价值都会上涨, 只要没有上涨到V2以上, 则除了赚取了卖方期权金, 还能赚取买方的上涨价值; 如果上涨到V2 以上, 虽然买方盈利，但是卖方部分存在亏损. 两者叠加得到净收益。考虑到T1时间更久, 在T2到期结束后, 还存在时间价值。&lt;/p&gt;

&lt;p&gt;而如果在T2到期时， 正股下跌。卖方期权金挣到手，同时会赔损掉买方的部分价值。如是，可以实现对冲。同时，因为T1时间更长，所以有希望在未来赚回收益。&lt;/p&gt;

&lt;p&gt;尤其是在call期权本金投入很大的时候，可以用这种方式进行成本控制. 考虑到时间价值加速流失的特点, 当 T2 &amp;lt; T1 时, 卖方期权的单位时间价值更高, 这样就能够在控制风险的同时，稳赢时间价值差. 如果是为了进一步控制风险, 还可以适当提升卖方期权的合约价格V2. 但相对应的, 收益的期权金会少一些，不过这个部分可以通过期权张数来平衡。&lt;/p&gt;

&lt;p&gt;所以，在买定长期call期权后, 可以持续卖出V2 &amp;gt; V1, T2 &amp;lt; T1的期权, 赚取权利金。当然，如果这个正股确实短期就上涨非常凶猛, 由于存在对冲的卖方, 会导致收益的减少。毕竟风险和收益是存在平衡。但是这种风险对冲方式确实是能够应对，长期看涨，短期波动的股票。实现利益最大化。&lt;/p&gt;

&lt;p&gt;一种投资理念：不赔钱也是一种赚钱。上面的方式很好的契合了这个理念。长期上涨, 赚; 短期下跌, 期权金对冲; 短期暴涨, 收益减少, 可以不赔钱; 短期暴跌, 期权金对冲损失, 买方收获时间价值; 长期下跌, 期权金对冲, 可以不赔钱。&lt;/p&gt;

&lt;p&gt;落袋为安, 优先收回成本, 其次赚取应得收益, 最后才是风险搏一把。期权并非要等到期之后, 再进行操作。可以在到期前进行交易，也就是学会合理的止盈，尤其是卖方期权尽可能提前止盈。因为它背后的风险是无限的,而收益是有限的。一般的期权金赚取到60%以上时, 最好就要考虑止盈了。不要贪心。&lt;/p&gt;

&lt;p&gt;当正股下跌, 卖方期权收益超过50%时,可以考虑清空75%卖方期权，卖方期权成本收回，且盈余25%的成本。买方期权由于时间更长，损失不及50%, 买卖两方折合下来，小盈。剩余部分可以安心等待T2到期. 当正股继续下跌, 卖方期权继续部分对冲买方, 最大损失50%的期权金。而如果正股转向开始涨, 由于买方期权拥有数量上的优势(1-25% = 75%), 实现整体盈利.&lt;/p&gt;

&lt;p&gt;这样的组合方式里面，一定要谨记卖方风险无限, 需要在买方操作前，降低比例，控制风险。买方期权是一道保险，保平安。&lt;/p&gt;

&lt;p&gt;而长期趋势判断错误是技术性失误，只能通过提升自身投资水平，而不是技巧层面能解决的。&lt;/p&gt;

&lt;h2 id=&quot;关键点&quot;&gt;关键点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;T1 到期时合约价格V1的判断, 买方落到价内&lt;/li&gt;
  &lt;li&gt;T2 到期时合约价格V2的判断, 卖方落到价外&lt;/li&gt;
  &lt;li&gt;买call的成本C1, 卖call的权利金C2. 对冲形成的风险是 C1 - C2.&lt;/li&gt;
  &lt;li&gt;当T2到期前出现大跌, 或者到期时未到价内V2, 都是很好的风险消除点（清空卖方期权）. 要时刻谨记卖方期权风险无限，需要优先处理。同时, 在这些时刻, 进行适当的call加仓, 会进一步增加盈利机遇。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 10 Jan 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2024/01/call-and-put.html</link>
        <guid isPermaLink="true">http://localhost:4000//2024/01/call-and-put.html</guid>
        
        
      </item>
    
      <item>
        <title>老铁又一年</title>
        <description>&lt;p class=&quot;meta&quot;&gt;ks-2023&lt;/p&gt;

&lt;p&gt;又是一个Q结束，重复着okr-review的流程。复盘的文档就跟流水帐一样，虽然满屏幕的飘红数字，但是我却没有一丝感觉。彷佛他们在讲的是一个离我很遥远的故事，与我何干。也确实与我关系不大。从升哥走后，我应该就没有真正负责过什么项目或者目标了，变成了一个纯粹的IC，但问题是“贡献”也不大，或者说都是些无关紧要的工作。&lt;/p&gt;

&lt;p&gt;一直以来，我秉持着“把事情做成”的理念工作。这是我校招的师傅给我讲的。可问题是，有些事情，从一开始就知道做不成，却还是要硬扛着做。不参与决策的执行者，就像个没有家的孩子。任谁都可以把你当个球，踢来踢去。项目成了，就是因为英明决策；项目败了，就是执行不到位。这种局面，确实不宜久留，但是确实又是一年过去了。工作上，过去的一年没有什么建树；生活上，倒是完成了一些很重要的事情。所以，这么看，过去的一年也还凑活。但也可能是我自己的开脱。&lt;/p&gt;

&lt;p&gt;升哥走之前，我晋升了一把，顺利进入到一个可以参与部分决策的位置。升哥走后，我开始做一众产品需求。没有什么技术含量，但是可以学习一下怎么管理项目。至少，我心里是这样想的，也为着手上的项目(房产、本地生活、语言区、家乡地等)勾画了一个蓝图。遇到问题，随时补位，实验的推全渐入佳境。彷佛又找到了那种久违的成就感。但是，殊不知这就是最高光的时刻了。之后，项目关停，人员重组，我又重新变成了一个IC。这倒也没有啥，但问题是还莫名进入了“房产”这个天坑的业务，成为一个无情的产品boost工具人。&lt;/p&gt;

&lt;p&gt;坦白的说，一开始，我对接手升哥的老大是有些意见的。方向上没有给予恰当的指导，执行上也没有给予足够的信任。让项目的推进中的每个人，都很难受。小组员因为转岗过来不久，开发还没有上手，但是项目的进度又很赶。所以大部分问题还是我这边帮忙解决的。但是，他又确实需要项目去landing, 所以就出现了“我干活，他推全”的局面。出了问题，报出case，他转发给我来查。这样直接拿来，他很尴尬。至于我，忙得手忙脚乱，到头却被老大问:”你自己干了啥”。当然，这中间可以找老大沟通。我也确实说过。但问题的关键是：项目进度赶。所以大多时候讨论完的解决方案是：“这个你先解决了，后面的问题我们再看”。如是重复，那还不如省去讨论，直接先解决了。&lt;/p&gt;

&lt;p&gt;问题核心的点是，并行的需求太多了。这个老大也没有搞清楚，谁是他的老板。把产品的需求排在第一的优先级。其实，在老铁厂的组织下，并非如此。reco是汇报给reco的老板，pm是有pm的老板，两个老板之间并没有上下级的汇报关系。pm的老板也很不厚道，完全没有考虑到我们组的目标。在新老板没有明白汇报关系时，趁火打劫，把我们整个组变成了他的需求实现机器。最终，我们这个老大把自己送走了。回过头去看，他其实也是帮我们顶住了很多的压力。作为一个小的边缘组，确实在reco老板那里左右为难。不过，由于错把PM当老板，整个玩完。&lt;/p&gt;

&lt;p&gt;当然，他在位期间，我们也做成了一件非常重要的事情，推荐系统迁移。有时候我甚至在想，他可能故意用PM需求去掩盖下困难，为的是促成迁移这件事。这样就有些令人唏嘘了，最艰难的骨头啃完，最后他没了。但是，写了最多bug的人，依然写了最多的迁移代码。迁移中最核心的几个问题(pipeline搭建，processor构图, 新processor定义)，并非此人完成。诚然，他干了很多苦活累活，但如果只根据这一点来区分贡献，也是非常不公道的。这种做法，充分验证了了”劣币驱逐良币”。而最终这个项目产出两次“担当敢为”，都颁发给此人。于项目其他成员而言，都是陪跑。从苦劳的角度上讲，给他一次完全合理。迁移之后的系统，其实并没有那么好用，有很多地方只是将坑换了个位置。至于收益来源，大头其实是简化和关闭了诸多历史遗留业务。这样的精简是必要的，只是这个事情并没有从根本上解决问题。但也或许，“够用即可”就是我们的工作。让老板看起来很重要，至于真实关键与否，在这里似乎反而是次要的。&lt;/p&gt;

&lt;p&gt;然后，2022年就差不多结束了。新年开始，我就陷入了“房产”业务的泥潭里面。说好听点，叫扛起一个业务方向；说不好听点，就是在打黑工。新老大(M3)代理我们组。对外，他很客气的给PM老板说，非常乐意投入人力，相信这件事的价值; 对内，要我们以自己的优化为主，房产是业务支持。但是就房产业务的工作量而言，却是超负荷的。而且，对接中与PM的沟通问题，一言难尽。PM小妹提需求咨询问题，直接到工位面对面，排期都采用倒排。就没有留给我们多少优化的时间。现在回过头总结，这一个项目带走了: 珍姐，强哥，昂哥，岳哥，几乎就是我之前小组的所有人了。&lt;/p&gt;

&lt;p&gt;再后来，出了一个大问题。推荐系统迁移推全了一个让房产业务腰斩的版本。对于这种线上事故的处理，相干的人感觉就跟脑壳里装了翔一样，拎不清。最后，我是费劲九六二虎之力，终于把这个事情翻页过去。但也是给PM老板留下了一个可以拿捏的把柄，然后新需求铺天盖地而来，最终送走了我最后的小伙伴, 岳哥。整个事情最让人无语的地方是，捅出问题的人，彷佛置身事外，毫不关己；而解决问题的人，反而被各种diss，就跟个罪犯一样。此处，特别感谢李老师的帮助和指导。让我自己及时复盘了下，不然那就是是黑锅扣死。当然，这期间我们又来了新老大(M2)，看到这场景，在第一次正式one-one时，开口就是“不符合预期”。我就是顶着这个帽子，开始跟新老板进行磨合。&lt;/p&gt;

&lt;p&gt;我很认真的想过，为什么我陷入如此境地？没有实线的管理等于负担，尤其是虚线的虚线。要在这样的组织中生存下来，需要关注个人IC。在管理模糊的地带，需要尽可能的明确下来，减少人员之间的踩踏。中间人在减少压力的同时，有些情况下，也会让信息不透明。尽可能不要让自己和实际领导之间存在中间人，如果做不到，尽量去错位处理。想要所有人都满意，结果很可能是所有人都不满意。忍受只能是一时，必然是不能长久的。如果一个组织让人不由衷的话，得看看得舍。如我去年的总结一样，丢什么，也不能丢了那份 “认真、担当、热情和勇敢”。想来想去，都导向一个选择 :确实该离开了。回归自己初始的样子，重新再出发.&lt;/p&gt;

&lt;p&gt;即使是现在，我依然相信这个页面是非常有想象空间的。只是能挖掘出来多少，这确实是取决于执行。很遗憾，我没有看到向好的苗头。我依然坚信那个想象空间，并且带着它，但愿能在新的地方去把它变成现实。&lt;/p&gt;

&lt;p&gt;总结下过去的一年的工作: 感受了项目管理的角色，毫不谦虚的讲，我做的还可以。烂坑房产，确实造成了很多困难。需要拒绝成为别人的棋子。更加的真诚，并且更加tough的坚持自己的坚持。&lt;/p&gt;

&lt;p&gt;但过去一年，也完成了两件对我很重要的事情。我有摩托的驾照了，并且骑上了摩托，尝试学习新东西，接纳自己的不足，并勇敢的修正它，看到自己在突破自己的恐惧，这种感觉真好。我有闺女了，我成为了一个父亲，一个新的身份。他可能不是我唯一的孩子，但是我是他唯一的父亲。这种责任的厚重感，确实只有成为了才会有感觉。&lt;/p&gt;

&lt;p&gt;零零碎碎，相当无感的一年多，有点消沉。但是人生还很长，不能主动求变的，只会被动变。但愿自己能在这最好最坏的时光里，用更多的主动，争取人生的一点从容。&lt;/p&gt;

&lt;!-- 好了，这就是过去这大半年的经历，记录一下，希望下一年回头对比看到，更多新的变化和成长。
 --&gt;

</description>
        <pubDate>Mon, 18 Sep 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2023/09/another-year-in-kuaishou.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/09/another-year-in-kuaishou.html</guid>
        
        <category>work</category>
        
        <category>promotion</category>
        
        <category>experience</category>
        
        
      </item>
    
      <item>
        <title>经典有趣歇后语</title>
        <description>&lt;p&gt;小麻雀啄牛欢喜: 确实(雀食)牛逼&lt;/p&gt;

&lt;p&gt;砂纸擦屁股: 露一手&lt;/p&gt;

&lt;p&gt;斑马的脑袋: 头头是道&lt;/p&gt;

&lt;p&gt;阎王爷的参谋: 小机灵鬼&lt;/p&gt;

&lt;p&gt;跟秦始皇亲嘴: 稳赢(嬴政)&lt;/p&gt;

&lt;p&gt;王八办走读: 憋(鳖)不住笑(校)&lt;/p&gt;

&lt;p&gt;闭着眼睛看王八: 无视规定(龟腚)&lt;/p&gt;

&lt;p&gt;贝壳退房: 蚌埠(不)住了&lt;/p&gt;

&lt;p&gt;看种猪流哈喇子: 你也配么&lt;/p&gt;

&lt;p&gt;悬崖上扭秧歌: 好日子到头了&lt;/p&gt;

&lt;p&gt;钟馗道长跳粪坑: 往屎(死)里捉(作)妖&lt;/p&gt;

&lt;p&gt;光屁股坐水晶: 以卵击石&lt;/p&gt;

&lt;p&gt;老神仙放屁: 不同凡响&lt;/p&gt;

&lt;p&gt;钥匙插屁眼: 开屎(始)了&lt;/p&gt;

&lt;p&gt;老奶奶钻被窝: 给爷整笑了&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Oct 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2022/10/interesting-sentence.html</link>
        <guid isPermaLink="true">http://localhost:4000//2022/10/interesting-sentence.html</guid>
        
        <category>interesting</category>
        
        
      </item>
    
      <item>
        <title>在老铁厂的日子</title>
        <description>&lt;p class=&quot;meta&quot;&gt;ks-2022&lt;/p&gt;

&lt;p&gt;一不小心, 在老铁厂的日子已经过了2年。有时感觉很快, 彷佛昨天还在ali, 听着印度神曲, 开冗长的周会,用excel分析实验数据; 而恍惚间,又感觉很慢,似乎已经当了多年的老铁。周围的同事一波波的来,又一波波的走,换了一批又一批。终于我也是那个送走别人的老员工了。而今,连老大也要走了。&lt;/p&gt;

&lt;p&gt;我不知道这算不算对自己以前频繁跳槽的救赎。但至少我能说,对跳槽有了更多的认识。工作大多时候都是一件很难忍受的事情,即使是那些绩效好的员工,包括老大。只要是打工,就免不了听人差遣的折磨。我们必须要承认的是,大部分人的成功都是源于偶然,只是因为踩中了机会,加上一些努力,然后就起飞了。而他们飞起来之后,总是要归因到其个人,免不了让别人恭维。奈何他是老板,打工人只能陪着笑脸。时间久了,打工人自己都难以分清最初的事实。驯化的结果就是,老板牛逼,一边听话的执行着,一边又总是感觉不对劲。大多数的跳槽都是因为老板,大部分的时候,都可以归因于：忍到不能再忍。&lt;/p&gt;

&lt;p&gt;如果真的能看到希望和路径,没有谁愿意做跳来跳去的浮萍。打工人,不值得。在我原有的认知里,打工就是给老板干活,老板说做什么,就做什么。老板招员工,是因为工作多得他一个人做不过来。而现在工作更像是一个不对等的卖身,老板也不知道要做什么,老板也不知道怎么做,老板只知道,他付给了员工1w的薪水,员工就得给他赚到1w以上的利润。老板是更好当了,可员工更不是人了。前者的无知无耻,铸就了打工人如蝼蚁般的卑微。&lt;/p&gt;

&lt;p&gt;从某种角度上看，我又是很幸运的。我遇到了一个真正有学识的老大, 而老大的老大又是一个有胸怀和格局的人。“有一天，当你遇到一个特别的人，特别到你也希望成为这样的人”，那么恭喜你，你遇到了你期望的未来。在老铁厂我收获了这样的幸运。这或许换一种理解是，跳得多了，自然就有机会？不尽然，即使这样，我也曾嚷嚷过要润。很庆幸去尝试了一下从未尝试过的决定。做难而正确的事，是个困难；持续如此，就更是个挑战。但种种迹象表明，这又是全局上最优的路径。&lt;/p&gt;

&lt;p&gt;最难受的不是事情没有做成，而是在做事的过程中，逐步丢失了“认真、担当、勇敢”的品质，即使事情成了，但心累了。拉长时间看，后者的损失更大。品质的养成除了受个人意志的影响外，还会潜移默化的受环境的牵引。一个项目的链路很长，有若干个卡点的环节，推动着，艰难推动，陷于其中，时间久了，甚至都忘了项目的全流程。或者，本身项目链路中该有哪些环节，都难以梳理清楚，而梳理的过程，都累得半死。比如，辛辛苦苦折腾半天，可能只是更改了一个参数值。这中间实在是没有什么沉淀的。于是，为了达成目的，更多的是在进行一些奇技淫巧。至于，更合理的环节和路径，是什么，应该是什么，都已经不再在乎。这非常不好，不要用别人的问题来惩罚自己。&lt;/p&gt;

&lt;p&gt;可以输掉事情，但不能输掉品质。环境不能有，意志需要有。不要在一个驻点，输掉了整个的人生。在说不好的时候，进一步问自己：什么是好的，好的是怎样的。遇到一个问题卡点了：“如果这个问题解决了，后续是怎样，全局的项目是怎样”？&lt;/p&gt;

&lt;p&gt;大局观的本质是，负责到底。&lt;/p&gt;

&lt;p&gt;环境越是不好的时候，越是需要注意。不要在愤懑看不上的人时，不知不觉的成为了曾经看不上的人。最可怕的是，被默默同化而不自知。愤懑批评谴责都可以，而这之后，更重要的是：如果换成我，会怎么做，给出切实可行的方案并验证。&lt;/p&gt;

&lt;p&gt;时常去这样的思考，常常去这样的换位，常常的如此训练，不断打磨自己的思想和认知，最好是形成自己的笔记。好记性不如烂笔头。文字可以帮助我们整理自己的思想。&lt;/p&gt;

&lt;p&gt;在老铁厂，我真正的感受了一把当产品的感觉。跳出调参工程师的思维，从整个产品的链路上看问题，更能看到关键点。我越来越觉得，全栈能力是未来。设计、产品、研发、算法、测试、体验、数据等等，需要全流程的把控。这不仅仅是公司的核心竞争力，也是个人的竞争力。显然，老铁厂在这块是有缺失的，尸位素餐者众。但老铁厂也有个明显的优点是，能够自下而上的小成本尝试。虽然也仅仅是尝试，也就止步于此。老铁厂没有一个“伟大”的内核渴望。至上而下的创新，极度非常的拉胯；而自下而上的创新，又极易胎死腹中。除非老铁厂来一次大换血，或者是一次由内而外的革新。不然，就是上不行，下不上，死翘翘。&lt;/p&gt;

&lt;p&gt;项目之所以能成为项目，初始时是需要有一个原始动机的。首先这是一个真实的需求，然后基于这个需求，推理出诸多的执行方案。虽然执行方案的设计和选择上，是工作量最大的部分。但相比于需求和推理，重要性是更次一些的。这种主次关系，在项目的推进过程中非常重要，却容易被忽视。比如：推荐算法模型的分排得越准，推荐的效果越好，为什么？这就是项目的原始动机。很多时候，我们只是默认了这个推理。却忽略了原始动机：用户消费内容存在注意力的问题，靠前的位置，能够更多的获得用户的关注，所以我们希望把更加匹配的内容放到更前面。如果清楚这个动机和推理，那么自然就能从更加根本的角度上设计方案。比如注意力机制，listwise排序等。而且，如果有活动样式强提示，吸引了用户注意力，自然就会破坏这个推理的基础。对于一个清楚原始动机的人来说，这个很容易被捕捉，并且很自然的设计出合理的解决方案。原始的动机和推理，需要时刻的提醒自己，贯穿始终。&lt;/p&gt;

&lt;p&gt;有些时候的老铁厂是，老板就像是那个付1w薪水，要求打工人挣回来10w利润的资本家。规划时，只车轱辘的说一个事，希望在消费和日活跃用户上看到增长。这不能算一个目标，因为这没有实操价值。我们可以把这拆解成可量化和执行的方向。而每到这时，就能收获一个灵魂发问：“你觉得应该定什么指标合适“。如果我能定，我来定，凭啥你坐的位置不属于我。可事实上，还真的要打工人定，还真的不属于打工人。凭啥？凭的是钞能力。以前看着是笑话，如今是一个活生生的笑话。&lt;/p&gt;

&lt;p&gt;兵熊熊一个，将熊熊一窝。诚不欺我。整体的状况上看，是不太乐观的。其缘由也是错综复杂的。历史的包袱，大环境的不好，行业的趋势等等。但是，这么多问题中，经常被抨击的是”不作为”，人的问题。相对于其他的问题而言，这个是看起来可以改变的，而实际上又是很难改进的。公司是一个成体系的组织，免不了制衡，以求整体的稳定。向前还是向后，可以另说，但是其中每一个个体都有其诉求。拉扯的终极结果，是相对的稳定，风险最低。大的变化中蕴藏机遇的同时，也是危机四伏。更多时候，更多的人，还是愿意选择一条容易和平稳的路。有雄心者，毕竟少数；有雄心，且有实力者，更是少之又少；更不要说，还有时事，不可造次。&lt;/p&gt;

&lt;p&gt;如果是我来经营老铁厂，会更加聚焦于核心价值。破圈是当下最重要的问题。甚至于，可以切分出新的子公司，和主产品，形成犄角之势，互相策应。目前，主产品的成功和规模，是因为运气，是在不清楚的情况下，莫名的成功。回推原因，尤其是要彻底搞清楚是一件近乎不可能的事，但是依然可以抽取出若干的关键点，依据此维护好主产品的基本盘；而更多的精力需要集中在新产品上，去切分新的市场，更灵活机动的增长起来。而目前的思路，希望把啥啥都放在主产品身上，历史包袱大，负担过重。不可能通过一个产品通吃，也不可能真正的一家独大，给对手留有一定的余地，才是一个健康的生态。既要又要还要的下场，大多时候是一无所得。相反的，一开始就很聚焦，从“只要”，到“可要” 逐步扩展，反而是更加合理的路径。&lt;/p&gt;

&lt;p&gt;当然，个人层面上，在老铁厂还是受益匪浅。尤其是对处在当前级别而言。当然，还是需要更进一步，一方面补齐基础原理和知识，跟进前沿研究进展；另一方面，持续提升自己的系统开发、项目设计的能力。成体系的，清楚来龙去脉。最后，祝愿老大在新的征程里，乘风破浪，再创新高。&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Jul 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2022/07/year-before-30yr.html</link>
        <guid isPermaLink="true">http://localhost:4000//2022/07/year-before-30yr.html</guid>
        
        <category>work</category>
        
        <category>promotion</category>
        
        <category>experience</category>
        
        
      </item>
    
      <item>
        <title>汇报和演讲</title>
        <description>&lt;h2 id=&quot;卖钻讲孔&quot;&gt;卖钻讲孔&lt;/h2&gt;

&lt;p&gt;演讲的本质是产品推销。介绍产品主要包含3个维度：Feature、 Advantage、 Benifit。我们很容易陷入到产品特点的介绍中去，比如: 性价比、外观设计、使用方式等。这部分有必要，但并非用户买单的理由。更好一点的做法是，去和竞品参照对比，体现出性能、价格优势、技术先进等。但其实更重要的是，要说清楚对用户的价值，为什么用户需要。帮助用户完成任务 task，或者是解决用户的挑战 challenge.&lt;/p&gt;

&lt;p&gt;推销钻头，更重要的是要看到用户要钻怎样的孔，然 后基于此再讲清楚钻头的特点，进而可以对比说明我们的优点在哪。也就是卖钻头的推销，需要更多的研究用户的孔。比如乔布斯在发布 iPod 时，他首先介绍的不是其技术参数和使用，而是说：这个小设备可以存一千首以上的歌，可以放在口袋里，让你听歌无忧。然后，再介绍这个是把存储从128MB扩充到5GB,这是个重大的技术突破。最后，我们对比下sony，足足提升了十几倍。这是一个非常棒的讲演。它遵循了 BFA 的顺序原则。&lt;/p&gt;

&lt;h2 id=&quot;思路清晰&quot;&gt;思路清晰&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;what? 问题是什么&lt;/li&gt;
  &lt;li&gt;why?  为什么重要&lt;/li&gt;
  &lt;li&gt;how?  如何解决的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;向上管理&quot;&gt;向上管理&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;领导请放心: 同步信息给领导，让领导知晓。&lt;/li&gt;
  &lt;li&gt;领导请费心: 商定方案和路线，请求领导决策。&lt;/li&gt;
  &lt;li&gt;领导请关心: 同步问题和困难, 寻求领导帮忙。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 16 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2022/06/Ideas-about-a-good-product-for-internet.html</link>
        <guid isPermaLink="true">http://localhost:4000//2022/06/Ideas-about-a-good-product-for-internet.html</guid>
        
        <category>说话</category>
        
        
      </item>
    
      <item>
        <title>2020.07-2022.01-流水的两年</title>
        <description>&lt;p class=&quot;meta&quot;&gt;ali-2020, ks-2021&lt;/p&gt;

&lt;p&gt;19年起我没有写总结，标榜着: 能放在心里的，何必写在纸上的。于是2年过去了，我能回想起的，寥寥无几。感觉发生了很多事，却又像什么都没有发生。这给我上了很重要的一课：把计划写在心里，在实现的时候，一步步印证；把总结写在纸上，慢慢沉淀，细细品味。用心规划，用笔总结。&lt;/p&gt;

&lt;p&gt;19年中，我几经周折到了ali，虽然是一个边缘的创业部门，但对当时的我来说，已经是一个不错的选择了。当时的ali是如日中天，我记得很深刻的是：我说我要去ali了，周围同事说的是，恭喜啊。如果是现在谁说去ali，那只能是：“哦”。很显然，我去的时间点，是一个高点，是一个公司在最辉煌的时刻。而这往往就意味着，下坡路。事实上，后续的走向，的确如此。从这件事中我学到的教训就是：当大家都知道一个东西好的时候，往往这个东西就快到头了。做选择要拉长时间线来看。&lt;/p&gt;

&lt;p&gt;于是我在ali的完整时间，只有一年。却是很充实。经历了很正式的代码串讲和转正答辩，新人企业文化培训(百阿培训），部门团建(三亚)，公司年会(20周年)。不过我在那里学到的最深刻的教训是：人微言轻。每个公司是有它自身的运行逻辑的(或者称之为公司制度、企业文化等)。公司之所以成，是因为他们；而败，也是因为他们。成败之间的平衡态，也是因为他们。在这套逻辑下，每个人都有他自己的职责或者叫scope。一方面，可以规避很多问题，另一方面，也带来了限制，当然这也是许多创业者的机会。而我在ali的工作总结下来都是和scope有关。&lt;/p&gt;

&lt;p&gt;我加入的是视频推荐算法模型组，精排、粗排都已经有坑位了，那自然的就是召回模型了。但是大组内，本身就有召回组。这就很微妙了。虽然最终的结果看，也是有ab效果，并推全了。但是，过程却是很揪心的。经历过赛马，经历过甩锅，甚至还和召回组的老大，撕破脸，大吵一架。那时的我还有点清高，带着不屑。从心底里看不上召回组，这种看不上带到表现上，就是不屑于“回怼”。但内心里这种生气的情绪又存在，于是就成了闷气。我就是这样憋着工作的。部门解散反倒是一种释然。很滑稽。&lt;/p&gt;

&lt;p&gt;以当时的召回组的工作看，他们的确是多余的。技术上他们没有什么新的想法，产出结果也很单薄。“英雄主义”很容易让人感觉充满了力量，从而作出一些不太符合身份的事情。虽然有些幼稚，但是却是很让人热血沸腾的。在ali我觉得我做的最好工作，不是FM, 不是diversity, 而是站在老大的视角对推荐系统的规划:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vector server (向量引擎)&lt;/li&gt;
  &lt;li&gt;user interest trigger(兴趣点刻画)&lt;/li&gt;
  &lt;li&gt;ranking consistence(排序目标贯穿推荐全过程)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些都不是我一个人能完成的，其实也不是我做不了。创新的想法落地，就需要划到不同团队的scope上。而所有团队的scope都有两个不成文的原则: 接锅scope要小，收益scope要大。scope划分就成了一个非常有讲究的组织学问。这应该也是一个经典的大公司病。更要命的是，还存在团队之间的踩踏。这个规划在执行的第一步，其实就出问题了，我硬撑着算做完了。&lt;/p&gt;

&lt;p&gt;和架构组合作，累死累活的搭建完向量引擎服务。召回组直接copy我们的想法，基于向量引擎上实验，还复用了一堆我们的实验代码，也不考虑迭代和可维护性，反正有效果就ok。我不愿意这样的合作，但是我又是身在其中。于是就非常的拧巴，劣币驱逐良币，就是这样被印证着。年轻的好处，就是年轻。我越级汇报了。我把规划完整的写了一个ppt，发给了大老大dy。大老大也很nice地约时间聊聊。但也就是聊聊而已。“你的想法有没有效果我不能确定，但以你的scope很难影响到系统”。&lt;/p&gt;

&lt;p&gt;我感到失望。不是因为他拒绝了我。即使他认为我越级不对，我也能接受。我不能接受的是，他否定了我的想法，原因是scope不够. 21年之后，团队招进一个字节的大哥，从他的介绍看，字节的召回系统非常相似。当然，他有scope，也准备了一份规划，不过不久之后部门就解散了，这也是后话。再后来我离开ali到了kuaishou, 即使放现在看，我当时的那份规划，也还是很先进的。不过，我不再想去复现他了，因为我终于能区分开工作和事业的差别了。无论是dy，还是召回组老大，他们都是在工作而已，工作的本质是：照章办事。只做眼前的事情，一步步迭代。而很少人关心更合理更长远的设计。工作之所以是工作，是因为它是有确定的流程规则的。只要掌握了那个流程，就有一份工作。部门解散后，dy去了新部门，继续当大老大。工作，工作而已。&lt;/p&gt;

&lt;p&gt;但做事业不是，做事业是要有想象力的。“勇敢的想象力”。要拥抱不确定性。我们当时那个部门属于创新事业部，我们做的事情也是一个公司内部的创业项目。当时部门解散，出去去创业也是一个很自然的选项，但大家没有走上这条路，也就是很合理了。叶公好龙之创新创业。于是我释怀了，每个人都有自己选择考虑，理应尊重。到这里，我反倒由失望变成了庆幸: 我庆幸自己被拒绝了，从而透过这纷纷扰扰的情绪中，看到了更加珍贵的东西，勇敢的想象力。庆幸自己没有限于工作而已。也希望以后为了自己的事业可以把这份规划变成现实。假设有一天我看到这样一个带想象力的小孩，希望自己能把关注放在他的作品上，而不是他的scope.&lt;/p&gt;

&lt;p&gt;20年7月初我离开ali，来到了ks, 过得没有什么记忆: 同乡项目, 三角洲营收, 结婚, 晋升失败等，都是鸡零狗碎的事情, 没有什么可以记录的，也没有什么值得记录的。学到了几条目前看很有用的经验：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用文档记录总结工作，这样就不用一遍遍的给别人解释，直接给文档链接就行，同时自己也可以通过文档记录，来检查自己的工作；&lt;/li&gt;
  &lt;li&gt;尝试一些从来没有的经历，人生里的每一段旅程都是独一无二的，并没有很多的“以后再说”。大多时候是，要么现在做了，要么这辈子都做不了了。在当前的组工作得不是很顺心，准备转岗，和老大沟通后，又选择留下。因为在以往的经历里，从来没有过“提了走而留下”的情况。这一次，不如留下看看，经历下。事实上，也很幸运，因为要转去的那个组，在年末面临了解散。&lt;/li&gt;
  &lt;li&gt;对产品的小弟不要太客气，对产品的老大要客气，因为产品的问题是自上而下驱动的，要抓关键人物； 对技术的老大不要客气，对研发的小哥要客气，因为小哥是真正干活实现和对接的人，能直接决定项目的结果。很多时候的问题，是我搞反了，比如在baidu我对产品老大和小弟的态度就搞反了, 在360是对研发小哥的态度没有摆正。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人生很短，如果有想做的事情，不要很粗略的规划到“以后再说”，因为并没有那么多的“以后”。要么是一个准确的时间安排，要么就是现在，不然就是这辈子都不会做了。而人只有这辈子。&lt;/p&gt;

&lt;p&gt;新的一年，时刻提醒着自己: 每一个现在都是这辈子里面的唯一时刻。&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Jan 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2022/01/pass-two-years-ali-ks.html</link>
        <guid isPermaLink="true">http://localhost:4000//2022/01/pass-two-years-ali-ks.html</guid>
        
        <category>alibaba</category>
        
        <category>kuaishou</category>
        
        <category>wedding</category>
        
        
      </item>
    
      <item>
        <title>过去这些年</title>
        <description>&lt;h3 id=&quot;2002&quot;&gt;2002&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;转学去罗河&lt;/li&gt;
  &lt;li&gt;租书卡：拿破仑传&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2007&quot;&gt;2007&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;中考，去枞阳县城读书&lt;/li&gt;
  &lt;li&gt;一不小心，期中考成了全校第二&lt;/li&gt;
  &lt;li&gt;化学竞赛&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2008&quot;&gt;2008&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;高中，年级排名第一，结束高一；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2009&quot;&gt;2009&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;校运动会1500km, 进入top6&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2010&quot;&gt;2010&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;去济南上大学，大学挺让人失望的&lt;/li&gt;
  &lt;li&gt;C语言和高数、大学物理很有意思。大学里除了机械，别的东西都很有意思，只可惜我就是机械专业的。也或许，冥冥中注定我会成为程序员。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2011&quot;&gt;2011&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;申请并通过去哈工大交流，&lt;/li&gt;
  &lt;li&gt;哈工大的实验课很有意思。&lt;/li&gt;
  &lt;li&gt;其实优秀的人，放到单个点上看，其实都泛善可陈，没啥突出的；优秀更多的是涓涓不息的积累和重复，耐心也许比爆发力来的更重要。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2012&quot;&gt;2012&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;学会了游泳、滑冰&lt;/li&gt;
  &lt;li&gt;有朋自远方来，暑假和高中同桌鹏的旅行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2013&quot;&gt;2013&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;无碳小车比赛，其实是很无聊的，不值当；&lt;/li&gt;
  &lt;li&gt;准备考研，申请进入了318实验室；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2014&quot;&gt;2014&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;考研失利，准备调剂中科大软院：独自准备研究生复试，初步看完计算机五门基础课&lt;/li&gt;
  &lt;li&gt;研究生一年级，重新学习计算机基础知识&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2015&quot;&gt;2015&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;考完试，去苏州联培&lt;/li&gt;
  &lt;li&gt;面包屑系统demo&lt;/li&gt;
  &lt;li&gt;出差去重庆&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016&quot;&gt;2016&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;面包屑系统路演&lt;/li&gt;
  &lt;li&gt;infocom 论文fail&lt;/li&gt;
  &lt;li&gt;谈对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017&quot;&gt;2017&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;研究生毕业&lt;/li&gt;
  &lt;li&gt;辞去毕业后的第一份工作：再见，我的好学生时代&lt;/li&gt;
  &lt;li&gt;重新校招：美团提前实习&lt;/li&gt;
  &lt;li&gt;360,offer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2018&quot;&gt;2018&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;入职360，推荐算法、widedeep、飞扬等&lt;/li&gt;
  &lt;li&gt;百度offer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2019&quot;&gt;2019&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;百度策略，职业发展上的一次滑铁卢，影响其实很大&lt;/li&gt;
  &lt;li&gt;纠正，我要做算法：阿里offer&lt;/li&gt;
  &lt;li&gt;入职阿里，转正并适应，三亚团建&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2020&quot;&gt;2020&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;U2I的FM召回，效果显现&lt;/li&gt;
  &lt;li&gt;部门被解散，转岗蚂蚁&lt;/li&gt;
  &lt;li&gt;离职，入职快手&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2021&quot;&gt;2021&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;快手同城推荐，深度上的思考和努力，是没有止境的&lt;/li&gt;
  &lt;li&gt;更高的要求，更平和的心态&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;感悟&quot;&gt;感悟&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;有突击和取巧心理，比如高中时在竞赛上的投入；工作后，想通过跳槽实现跨越；&lt;/li&gt;
  &lt;li&gt;突击取巧，有冲劲和激情，有强烈的渴望，狂热，甚至于忘却自我，这种感觉和状态很好，不足是，不稳定，功利心很重，很急躁；&lt;/li&gt;
  &lt;li&gt;最有力量的，不是握紧和用力，而是放空和平和；轻盈放空的思想，才是绵绵不断的力量之源&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;放空自己再出发&quot;&gt;放空自己，再出发&lt;/h2&gt;

</description>
        <pubDate>Fri, 26 Mar 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2021/03/reminder.html</link>
        <guid isPermaLink="true">http://localhost:4000//2021/03/reminder.html</guid>
        
        
      </item>
    
      <item>
        <title>机器学习:FTRL</title>
        <description>&lt;h2 id=&quot;在线学习中两个问题online-learning-regret--sparsity&quot;&gt;在线学习中两个问题{Online Learning: Regret + Sparsity}&lt;/h2&gt;
&lt;p&gt;在线学习 ( &lt;code class=&quot;highlighter-rouge&quot;&gt;Online Learning&lt;/code&gt;  ) 代表了一系列机器学习算法，特点是每来一个样本就能训练，能够根据线上反馈数据，实时快速地进行模型调整，使得模型及时反映线上的变化，提高线上预测的准确率。相比之下，传统的批处理方式需要一次性收集所有数据，新数据到来时重新训练的代价也很大，因而更新周期较长，可扩展性不高。&lt;/p&gt;

&lt;p&gt;一般对于在线学习来说，我们致力于解决两个问题： 降低 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt; 和提高 &lt;code class=&quot;highlighter-rouge&quot;&gt;sparsity&lt;/code&gt;。其中 regret 的定义为:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
    Regret = \sum\limits_{t=1}^T \ell_t({\bf{w_t}}) - \min_\bf{w}\sum\limits_{t=1}^T\ell_t(\bf{w}) 
\end{equation}&lt;/script&gt;
其中 $𝑡$ 表示总共 $𝑇$ 轮中的第 $𝑡$ 轮迭代，$\ell_t$ 表示损失函数，$𝐰$ 表示要学习的参数。第二项 $\min\limits_\bf{w}\sum\limits_{t=1}^T\ell_t(\bf{w})$ 表示得到了所有样本后损失函数的最优解，因为在线学习一次只能根据少数几个样本更新参数，随机性较大，所以需要一种稳健的优化方式，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt; 字面意思是 “后悔度”，意即更新完不后悔。&lt;/p&gt;

&lt;p&gt;在理论上可以证明，如果一个在线学习算法可以保证其 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt; 是 $𝑡$ 的次线性函数，则：
&lt;script type=&quot;math/tex&quot;&gt;\lim\limits_{t \to \infty}\frac{\text{Regret}(t)}{t} = 0&lt;/script&gt;
那么随着训练样本的增多，在线学习出来的模型无限接近于最优模型。而毫不意外的，&lt;code class=&quot;highlighter-rouge&quot;&gt;FTRL&lt;/code&gt; 正是满足这一特性。&lt;/p&gt;

&lt;p&gt;另一方面，现实中对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;sparsity&lt;/code&gt; ，也就是模型的稀疏性也很看中。上亿的特征并不鲜见，模型越复杂，需要的存储、时间资源也随之升高，而稀疏的模型会大大减少预测时的内存和复杂度。另外稀疏的模型相对可解释性也较好，这也正是通常所说的 &lt;code class=&quot;highlighter-rouge&quot;&gt;L1&lt;/code&gt; 正则化的优点。&lt;/p&gt;

&lt;p&gt;后文主要考察 &lt;code class=&quot;highlighter-rouge&quot;&gt;FTRL&lt;/code&gt; 是如何实现降低 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt; 和提高 &lt;code class=&quot;highlighter-rouge&quot;&gt;sparsity&lt;/code&gt; 这两个目标的。&lt;/p&gt;

&lt;h2 id=&quot;优化落脚点gradient-learning-learning-rate--regulation&quot;&gt;优化落脚点{Gradient Learning: Learning Rate + Regulation}&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OGD&lt;/code&gt; ( &lt;code class=&quot;highlighter-rouge&quot;&gt;online gradient descent&lt;/code&gt; ) 是传统梯度下降的 online 版本，参数更新公式为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
\bf{w}_{t+1} = \bf{w}_t - \eta_t \bf{g}_t
\end{equation}&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OGD&lt;/code&gt; 在准确率上表现不错，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt; 低，但在上文的另一个考量因素 &lt;code class=&quot;highlighter-rouge&quot;&gt;sparsity&lt;/code&gt; 上则表现不佳，即使加上了 $L1$ 正则也很难使大量的参数变零。一个原因是浮点运算很难让最后的参数出现绝对零值；另一个原因是不同于批处理模式，&lt;code class=&quot;highlighter-rouge&quot;&gt;online&lt;/code&gt; 场景下每次 $𝐰$ 的更新并不是沿着全局梯度进行下降，而是沿着某个样本的产生的梯度方向进行下降，整个寻优过程变得像是一个“随机” 查找的过程，这样 &lt;code class=&quot;highlighter-rouge&quot;&gt;online&lt;/code&gt; 最优化求解即使采用 $L1$ 正则化的方式， 也很难产生稀疏解。正因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;OGD&lt;/code&gt; 存在这样的问题，FTRL 才致力于在准确率不降低的前提下提高稀疏性。&lt;/p&gt;

&lt;p&gt;其实，OGD的公式等价于
&lt;script type=&quot;math/tex&quot;&gt;\bf{w}_{t+1} = \mathop{\text{argmin}}_\bf{w} \left(\bf{g}_t \cdot \bf{w} + \frac{1}{2\eta_t}||\bf{w} - \bf{w}_t||_2^2 \right) \tag{1.2}&lt;/script&gt;
对该式直接求导即可，
&lt;script type=&quot;math/tex&quot;&gt;\bf{g}_t + \frac{1}{\eta_t}(\bf{w} - \bf{w}_t) = 0 \;\;\implies\;\; \bf{w} = \bf{w}_t - \eta_t \bf{g}_t&lt;/script&gt;
有了这个公式的基础，FTRL主要从两个方面进行优化&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;降低 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;提高 &lt;code class=&quot;highlighter-rouge&quot;&gt;sparsity&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，为了降低 &lt;code class=&quot;highlighter-rouge&quot;&gt;regret，FTRL&lt;/code&gt; 用 $𝐠_{1:𝑡}$ 代替 $g_t$ ，$𝐠_{1:𝑡}$ 为前 $1$ 到 $t$ 轮损失函数的累计梯度，即&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\bf{g}_{1:t} = \sum_{s=1}^t \bf{g}_s = \sum_{s=1}^t \nabla \ell_s(\bf{w_s})&lt;/script&gt;
由于在线学习随机性大的特点，累计梯度可避免由于某些维度样本局部抖动太大导致错误判断。这是从 &lt;code class=&quot;highlighter-rouge&quot;&gt;FTL ( Follow the Leader )&lt;/code&gt; 那借鉴而来的，而 FTRL 的全称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Follow the Regularized Leader&lt;/code&gt; ，从名字上看其实就是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;FTL&lt;/code&gt; 的基础上加上了正则化项，即 (1.2) 式中的&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;||\bf{w} - \bf{w_t}||_2^2&lt;/script&gt;
这意味着每次更新时我们不希望新的 $𝐰$ 离之前的 $𝐰_𝑡$ 太远 (这也是有时其被称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;FTRL-proximal&lt;/code&gt; 的原因)，这同样是为了降低regret，在线学习噪音大，若一次更新错得太远后面难以收回来，没法轻易“后悔”。&lt;/p&gt;

&lt;p&gt;于是&lt;code class=&quot;highlighter-rouge&quot;&gt;FTRL&lt;/code&gt;的公式在&lt;code class=&quot;highlighter-rouge&quot;&gt;OGD&lt;/code&gt;的基础上被改造成这个样子:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}
\bf{w}_{t+1}&amp;=\mathop{\text{argmin}}\limits_{\bf{w}}\left(\bf{g}_{1:t} \cdot \bf{w} + \frac12 \sum\limits_{s=1}^t \sigma_s ||\bf{w} - \bf{w}_s||_2^2 + \lambda_1||\bf{w}||_1 + \frac12 \lambda_2||\bf{w}||_2^2\right) \\

&amp;=\mathop{\text{argmin}}_{\bf{w}} \left\{ \left(\bf{g}_{1:t} - \sum\limits_{s=1}^t\sigma_s\bf{w}_s \right) \cdot \bf{w} + \lambda_1||\bf{w}||_1 + \frac12 \left(\lambda_2 + \sum\limits_{s=1}^t \sigma_s \right) \cdot ||\bf{w}||_2^2 + \frac12 \sum\limits_{s=1}^t \sigma_s||\bf{w}_s||_2^2 \right\} 
\end{split}\tag{1.3}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;由于 
&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2} \sum\limits_{s=1}^t \sigma_s || \bf{w_s} ||_2^2&lt;/script&gt;
相对于要优化的变量$\bf{w}$是一个常数，可以消去这一项。令 &lt;script type=&quot;math/tex&quot;&gt;\bf{z}_t = \bf{g}_{1:t} - \sum\limits_{s=1}^t \sigma_s\bf{w}_s&lt;/script&gt;, 简化得到
&lt;script type=&quot;math/tex&quot;&gt;\bf{w}_{t+1} = \mathop{\text{argmin}}_{\bf{w}} \left\{ \bf{z}_t \cdot \bf{w} + \lambda_1||\bf{w}||_1 + \frac12 \left(\lambda_2 + \sum\limits_{s=1}^t \sigma_s \right) \cdot ||\bf{w}||_2^2 \right\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;将特征的各个维度拆开成独立的标量最小化问题，对于第 $i$ 个特征，对应的权重为&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;w_{t+1,i} = \mathop{\text{argmin}}_{w_i \in \mathbb{R}} \left\{ z_{t,i} \, w + \lambda_1 |w_i| + \frac12 \left(\lambda_2 + \sum\limits_{s=1}^t \sigma_s \right) \cdot w_i^2 \right\} \tag{1.6}&lt;/script&gt;
这是一个无约束的非平滑参数优化问题，其中第二项&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_1 |w_i|&lt;/script&gt;

&lt;p&gt;在 &lt;script type=&quot;math/tex&quot;&gt;𝑤_𝑖=0&lt;/script&gt;处不可导, 因而常用的方法是使用次导数, 这里直接上结论： 定义 
&lt;script type=&quot;math/tex&quot;&gt;\phi \in \partial |w_i^*|&lt;/script&gt;为 &lt;script type=&quot;math/tex&quot;&gt;|𝑤_𝑖|&lt;/script&gt; 在 &lt;script type=&quot;math/tex&quot;&gt;𝑤^∗_𝑖&lt;/script&gt; 处的次导数，于是有：
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\partial |w_i^*| =
\begin{cases}
\quad\quad\{1\} &amp;\quad \text{if}\;\; w_i^* &gt; 0 \\[1ex]
-1 &lt; \phi &lt; 1  &amp; \quad \text{if}\;\; w_i^* = 0 \\[1ex] 
\quad\;\;\{-1\} &amp;\quad \text{if}\;\; w_i^* &lt; 0
\end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;从而对（1.6）求导并令其为零得：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
    z_{t,i} + \lambda_1 \phi + \left(\lambda_2 + \sum\limits_{s=1}^t \sigma_s\right)\cdot w_i = 0  \tag{1.8}
\end{equation}&lt;/script&gt;
在这个公式中，$\lambda_1 &amp;gt; 0$ 和 $\left(\lambda_2 + \sum\limits_{s=1}^t \sigma_s\right) &amp;gt; 0$，为了保证(1.8)成立，可以得到:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{equation}
 w_{t+1,i} = 
\begin{cases}
\qquad\qquad \large{0}   &amp; \text{if}\;\; |z_{t,i}| &lt; \lambda_1 \\[2ex]
-\frac{1}{\lambda_2 + \sum_{s=1}^t\sigma_s} \left(z_{t,i} - \text{sgn}(z_{t,i})\cdot\lambda_1 \right) &amp; \text{otherwise}  \tag{1.9}
\end{cases}
 \end{equation} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;可以看到当 &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\bf{z}_t = (\bf{g}_{1:t} - \sum\limits_{s=1}^t \sigma_s\bf{w}_s) &lt;\lambda_1 %]]&gt;&lt;/script&gt; 时，参数置为零，这就是 FTRL 稀疏性的由来。另外加入 L2 正则并没有影响模型的稀疏性，从 (1.9) 式看只是使得分母变大，进而 𝑤𝑖 更趋于零了，这在直觉上是符合正则化本身的定义的.&lt;/p&gt;

&lt;p&gt;观察 (1.9) 式还遗留一个问题，$\sigma_s$ 的值是什么呢？这牵涉到 FTRL 的学习率设置。当然严格意义上的学习率是 $\eta_t$ ，而 $\sigma_t = \frac{1}{\eta_t} - \frac{1}{\eta_{t-1}}$ ，论文中这样定义可能是为了推导和实现的方便。前文 (1.1) 式中 OGD 使用的是一个全局学习率 $\eta_t = \frac{1}{\sqrt{t}}$，会随着迭代轮数的增加而递减，但该方法的问题是所有特征维度都使用了一样的学习率。&lt;/p&gt;

&lt;p&gt;FTRL 采用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Per-Coordinate Learning Rate&lt;/code&gt;，即每个特征采用不同的学习率，这种方法考虑了训练样本本身在不同特征上分布的不均匀性。如果一个特征变化快，则对应的学习率也会下降得快，反之亦然。其实近年来随着深度学习的流行这种操作已经是很常见了，常用的 AdaGrad、Adam 等梯度下降的变种都蕴含着这类思想。FTRL 中第 $𝑡$ 轮第 $𝑖$ 个特征的学习率为：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
 \eta_{t, i} = \frac{\alpha}{\beta + \sqrt{\sum_{s=1}^t g_{s, i}^2}}  \tag{1.10}
 \end{equation}&lt;/script&gt;
于是 1.9 中$\sum_{s=1}^t \sigma_s$ 得这一项等于：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}
\sum\limits_{s=1}^t \sigma_s &amp;= (\frac{1}{\eta_t} - \frac{1}{\eta_{t-1}}) + (\frac{1}{\eta_{t-1}} - \frac{1}{\eta_{t-2}}) + \cdots + (\frac{1}{\eta_1} - \frac{1}{\eta_0}) \\
&amp;=\;\; \frac{1}{\eta_t} \;\;=\;\; \frac{\beta + \sqrt{\sum_{s=1}^tg_{s,i}^2}}{\alpha}
\end{split}\tag{1.11}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;从而，$w_{i+1}$的数学公式上的表示为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
 w_{t+1,i} = 
\begin{cases}
\qquad\qquad \large{0}   &amp; \quad\text{if}\;\; |z_{t,i}| &lt; \lambda_1 \\[2ex]
- \left(\lambda_2 + \frac{\beta + \sqrt{\sum_{s=1}^t g_{s,i}^2}}{\alpha} \right)^{-1} \left(z_{t,i} - \text{sgn}(z_{t,i})\cdot\lambda_1 \right) &amp; \quad \text{otherwise}  
\end{cases}\tag{1.12}
 \end{equation} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;工程实现上的公式转换&quot;&gt;工程实现上的公式转换&lt;/h2&gt;

&lt;p&gt;在代码实现上，考虑到 $t$ 到 $t+1$ 的迭代的特点，可以把中间的结果存起来，方便后续的计算:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}
z_{t,i} &amp;= g_{1:t, i} - \sum\limits_{s=1}^t \sigma_{s, i} w_{s,i} = \sum\limits_{s=1}^t g_{s,i} - \sum\limits_{s=1}^t \sigma_{s, i} w_{s,i} = z_{t-1,i} + (g_{t,i} - \sigma_{t,i}w_{t,i}) \\[1ex]
&amp;= z_{t-1,i} + g_{t,i} - \left(\frac{1}{\eta_{t,i}} - \frac{1}{\eta_{t-1, i}} \right) w_{t,i} \\
&amp;= z_{t-1,i} + g_{t,i} - \frac{\sqrt{\sum_{s=1}^t g_{s,i}^2} - \sqrt{\sum_{s=1}^{t-1} g_{s,i}^2}}{\alpha} w_{t,i}
\end{split} \tag{3.1}\end{equation} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
 \begin{aligned}
 n_{t,i} &amp;= \sum_{s=1}^t g_{s,i}^2 = \sum_{s=1}^{t-1} g_{s,i}^2 + g_{t,i}^2 \\
        &amp;= n_{t-1,i} + g_{t,i}^2
 \end{aligned} 
 \tag{3.2}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
g_{t,i} = y_t (S(y_t f(\bf{x}_t)) - 1) x_i = y_t \left(\frac{1}{1 + e^{- y_t f(\bf{x}_t)}} - 1 \right) x_i  \tag{3.3}
\end{equation}&lt;/script&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/massquantity/p/12693314.html&quot;&gt;在线优化算法 FTRL 的原理与实现&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Nov 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2020/11/FTRL.html</link>
        <guid isPermaLink="true">http://localhost:4000//2020/11/FTRL.html</guid>
        
        <category>online learning</category>
        
        <category>machine learning</category>
        
        <category>ftrl</category>
        
        
      </item>
    
      <item>
        <title>惯导系统研究</title>
        <description>&lt;h2 id=&quot;惯导姿态识别原理&quot;&gt;惯导姿态识别：原理&lt;/h2&gt;
&lt;h3 id=&quot;论文&quot;&gt;论文：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An efficient orientation filter for inertial and inertial/magnetic sensor arrays&lt;/li&gt;
  &lt;li&gt;Estimation of IMU and MARG orientation using a gradient descent algorithm
    &lt;h2 id=&quot;惯导的应用和研究&quot;&gt;惯导的应用和研究&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;掼导的研究方向&quot;&gt;掼导的研究方向&lt;/h2&gt;
</description>
        <pubDate>Sat, 26 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2020/09/imu-system-design.html</link>
        <guid isPermaLink="true">http://localhost:4000//2020/09/imu-system-design.html</guid>
        
        <category>imu</category>
        
        <category>cps</category>
        
        <category>iot</category>
        
        
      </item>
    
      <item>
        <title>搭建推荐系统</title>
        <description>&lt;p&gt;准备一步步从零开始搭建一个推荐系统，算作是对自己工作的一个总结和整合。&lt;/p&gt;

&lt;h2 id=&quot;第一期的想法是&quot;&gt;第一期的想法是，&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;离线：模型走单机的训练，训练数据也是本地文件加载&lt;/li&gt;
  &lt;li&gt;在线：通过rpc提供服务，利用proto定义 特征输入输出&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kickoff-模型训练&quot;&gt;kickoff-模型训练&lt;/h3&gt;
&lt;p&gt;这一部分就准备先用FM搭建，参考 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://castellanzhang.github.io/&lt;/code&gt;，先看懂别人的代码，看本地多线程的。后面再考虑扩展两点：分布式训练 + 在线学习
distribution-training + online-learning&lt;/p&gt;

&lt;h3 id=&quot;mpi-训练框架接入分布式训练&quot;&gt;MPI 训练框架接入：分布式训练&lt;/h3&gt;

&lt;h3 id=&quot;消息队列joiner模块接入实时数据流训练&quot;&gt;消息队列joiner模块，接入实时数据流训练&lt;/h3&gt;

&lt;h3 id=&quot;接入tensorflow方便模型构图和定义&quot;&gt;接入tensorflow，方便模型构图和定义&lt;/h3&gt;

&lt;h3 id=&quot;模型和服务升级&quot;&gt;模型和服务升级&lt;/h3&gt;

&lt;h3 id=&quot;通用框架--可视化&quot;&gt;通用框架 + 可视化&lt;/h3&gt;

&lt;h3 id=&quot;服务化&quot;&gt;服务化&lt;/h3&gt;
</description>
        <pubDate>Sat, 26 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000//2020/09/build-a-recommendation-system-step-by-step.html</link>
        <guid isPermaLink="true">http://localhost:4000//2020/09/build-a-recommendation-system-step-by-step.html</guid>
        
        <category>recommendation-system</category>
        
        <category>model</category>
        
        <category>server</category>
        
        
      </item>
    
  </channel>
</rss>
